const Order = require('../models/Order');
const TelegramBot = require('node-telegram-bot-api');

// Log environment variables
console.log('Environment variables in orderController:');
console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN);
console.log('TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID);

// L·∫•y token v√† chatId t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

// Ki·ªÉm tra token v√† chatId
if (!token || !chatId) {
    console.error('‚ùå ERROR: Missing Telegram configuration!');
    console.error('Token:', token);
    console.error('ChatID:', chatId);
} else {
    console.log('‚úÖ Telegram configuration loaded successfully');
}

// Kh·ªüi t·∫°o bot v·ªõi token
const bot = new TelegramBot(token, { polling: false });

// Test bot connection
(async () => {
    try {
        if (!token || !chatId) {
            console.error('‚ùå Kh√¥ng th·ªÉ test bot: Token ho·∫∑c ChatID kh√¥ng h·ª£p l·ªá');
            return;
        }
        
        console.log('ü§ñ ƒêang test k·∫øt n·ªëi Telegram bot...');
        await bot.sendMessage(chatId, 'üîÑ Bot ƒëang ho·∫°t ƒë·ªông - Test message');
        console.log('‚úÖ Test bot th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi bot:', error.message);
        console.error('Chi ti·∫øt l·ªói:', error);
    }
})();

const sendOrderNotification = async (orderData) => {
    console.log('B·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o Telegram cho ƒë∆°n h√†ng:', orderData.orderId || orderData._id);
    
    try {
        // Ki·ªÉm tra l·∫°i token v√† chatId
        if (!token || !chatId) {
            console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: Token ho·∫∑c ChatID kh√¥ng h·ª£p l·ªá');
            console.error('Token:', token);
            console.error('ChatID:', chatId);
            return false;
        }
        
        // Ki·ªÉm tra d·ªØ li·ªáu ƒë∆°n h√†ng
        console.log('D·ªØ li·ªáu ƒë∆°n h√†ng:', JSON.stringify(orderData));
        
        // X·ª≠ l√Ω d·ªØ li·ªáu ƒë∆°n h√†ng - ƒë·∫£m b·∫£o c√≥ t·∫•t c·∫£ c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        const orderDataObj = orderData.toObject ? orderData.toObject() : orderData;
        
        // Chu·∫©n b·ªã n·ªôi dung tin nh·∫Øn
        const message = `
üéÇ *ƒê∆†N H√ÄNG M·ªöI*

üìù *M√£ ƒë∆°n:* ${orderDataObj.orderId || 'Kh√¥ng c√≥ m√£'}
üç∞ *Lo·∫°i b√°nh:* ${orderDataObj.cakeType || 'Kh√¥ng x√°c ƒë·ªãnh'}
üë§ *Kh√°ch h√†ng:* ${orderDataObj.customerName || 'Kh√¥ng x√°c ƒë·ªãnh'}
üì± *Ngu·ªìn:* ${orderDataObj.orderSource || 'Kh√¥ng x√°c ƒë·ªãnh'}
üìù *N·ªôi dung:* ${orderDataObj.orderNotes || 'Kh√¥ng c√≥'}
üí∞ *T·ªïng ti·ªÅn:* ${orderDataObj.orderPrice || 0}
üíµ *Ti·ªÅn c·ªçc:* ${orderDataObj.deposit || 0}
üìç *ƒê·ªãa ch·ªâ:* ${orderDataObj.deliveryAddress || 'Kh√¥ng c√≥'}
üïí *Th·ªùi gian giao:* ${orderDataObj.deliveryTime ? new Date(orderDataObj.deliveryTime).toLocaleString('vi-VN') : 'Kh√¥ng x√°c ƒë·ªãnh'}
`;

        // G·ª≠i th√¥ng b√°o
        console.log('ƒêang g·ª≠i th√¥ng b√°o v·ªõi n·ªôi dung:', message);
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng');
        return true;
    } catch (error) {
        console.error('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o Telegram:', error.message);
        console.error('Chi ti·∫øt l·ªói:', error);
        return false;
    }
};

// CRUD operations
exports.getOrders = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const orders = await Order.find().sort({ createdAt: -1 }).skip(skip).limit(limit);
        const total = await Order.countDocuments();

        res.json({ orders, currentPage: page, totalPages: Math.ceil(total / limit), totalOrders: total });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

exports.getOrder = async (req, res) => {
    try {
        const order = await Order.findOne({ orderId: req.params.orderId });
        if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        res.json(order);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

exports.createOrder = async (req, res) => {
    try {
        console.log('ƒêang t·∫°o ƒë∆°n h√†ng m·ªõi v·ªõi d·ªØ li·ªáu:', JSON.stringify(req.body));
        const order = new Order(req.body);
        const savedOrder = await order.save();
        console.log('ƒê√£ l∆∞u ƒë∆°n h√†ng, b·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o');
        
        // G·ª≠i th√¥ng b√°o Telegram
        setTimeout(async () => {
            try {
                const notificationSent = await sendOrderNotification(savedOrder);
                console.log('K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o:', notificationSent ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i');
            } catch (error) {
                console.error('L·ªói khi g·ª≠i th√¥ng b√°o Telegram (timeout):', error);
            }
        }, 500); // ƒê·ª£i 500ms ƒë·ªÉ ƒë·∫£m b·∫£o ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u ho√†n to√†n

        res.status(201).json(savedOrder);
    } catch (error) {
        console.error('L·ªói khi t·∫°o ƒë∆°n h√†ng:', error);
        res.status(400).json({ message: error.message });
    }
};

exports.updateOrder = async (req, res) => {
    try {
        const order = await Order.findOneAndUpdate(
            { orderId: req.params.orderId },
            req.body,
            { new: true, runValidators: true }
        );
        if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        res.json(order);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

exports.deleteOrder = async (req, res) => {
    try {
        const order = await Order.findOneAndDelete({ orderId: req.params.orderId });
        if (!order) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
        res.json({ message: 'ƒê√£ x√≥a ƒë∆°n h√†ng' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Filters
exports.getOrdersByStatus = async (req, res) => {
    try {
        const status = req.params.status;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const orders = await Order.find({ orderStatus: status })
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit);

        const total = await Order.countDocuments({ orderStatus: status });

        res.json({ orders, currentPage: page, totalPages: Math.ceil(total / limit), totalOrders: total });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

exports.getOrdersByDateRange = async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const query = {};
        if (startDate && endDate) {
            query.createdAt = {
                $gte: new Date(startDate),
                $lte: new Date(endDate)
            };
        }

        const orders = await Order.find(query)
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit);

        const total = await Order.countDocuments(query);

        res.json({ orders, currentPage: page, totalPages: Math.ceil(total / limit), totalOrders: total });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Test Telegram bot
exports.testTelegramBot = async (req, res) => {
    try {
        if (!token || !chatId) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu c·∫•u h√¨nh Telegram Bot. Vui l√≤ng ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng.'
            });
        }

        await bot.sendMessage(chatId, 'üß™ *TEST BOT* - Tin nh·∫Øn test t·ª´ API', { parse_mode: 'Markdown' });

        res.json({
            success: true,
            message: 'ƒê√£ g·ª≠i tin nh·∫Øn test th√†nh c√¥ng!',
            config: {
                botToken: `${token.substring(0, 5)}...${token.substring(token.length - 5)}`,
                chatId
            }
        });
    } catch (error) {
        console.error('L·ªói khi test bot:', error);
        res.status(500).json({
            success: false,
            message: `L·ªói khi g·ª≠i tin nh·∫Øn test: ${error.message}`,
            error: error.stack
        });
    }
};
